//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.InterbotixXs
{
    [Serializable]
    public class JointTrajectoryCommandMsg : Message
    {
        public const string k_RosMessageName = "interbotix_xs_msgs/JointTrajectoryCommand";
        public override string RosMessageName => k_RosMessageName;

        //  Command a joint trajectory to the desired joint(s). Note that the commands are processed differently based on the currently set operating mode.
        //  For example, if the operating mode is set to 'position', the commands are interpreted as positions in radians
        public string cmd_type;
        //  set to 'single' for a single joint or 'group' for a group of joints
        public string name;
        //  joint group name if 'cmd_type' is set to 'group' or joint name if 'cmd_type' is set to 'single'
        public Trajectory.JointTrajectoryMsg traj;
        //  ROS trajectory message

        public JointTrajectoryCommandMsg()
        {
            this.cmd_type = "";
            this.name = "";
            this.traj = new Trajectory.JointTrajectoryMsg();
        }

        public JointTrajectoryCommandMsg(string cmd_type, string name, Trajectory.JointTrajectoryMsg traj)
        {
            this.cmd_type = cmd_type;
            this.name = name;
            this.traj = traj;
        }

        public static JointTrajectoryCommandMsg Deserialize(MessageDeserializer deserializer) => new JointTrajectoryCommandMsg(deserializer);

        private JointTrajectoryCommandMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.cmd_type);
            deserializer.Read(out this.name);
            this.traj = Trajectory.JointTrajectoryMsg.Deserialize(deserializer);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.cmd_type);
            serializer.Write(this.name);
            serializer.Write(this.traj);
        }

        public override string ToString()
        {
            return "JointTrajectoryCommandMsg: " +
            "\ncmd_type: " + cmd_type.ToString() +
            "\nname: " + name.ToString() +
            "\ntraj: " + traj.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
