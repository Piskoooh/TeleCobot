//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.InterbotixXs
{
    [Serializable]
    public class HexJoyMsg : Message
    {
        public const string k_RosMessageName = "interbotix_xs_msgs/HexJoy";
        public override string RosMessageName => k_RosMessageName;

        //  This message is used specifically in the interbotix_xshexapod_joy package
        // 
        //  Maps raw 'joy' commands to more specific ones to control an Interbotix hexapod
        //  enum values that define the joystick controls for the robot
        // ########################################################################################################
        //  Command Options to move the Hexapod in the 'world' or in 'place'
        //  World Control
        public const sbyte WORLD_X_INC = 1;
        public const sbyte WORLD_X_DEC = 2;
        public const sbyte WORLD_Y_INC = 3;
        public const sbyte WORLD_Y_DEC = 4;
        public const sbyte WORLD_YAW_CCW = 5;
        public const sbyte WORLD_YAW_CW = 6;
        //  In Place Control
        public const sbyte PLACE_X_INC = 7;
        public const sbyte PLACE_X_DEC = 8;
        public const sbyte PLACE_Y_INC = 9;
        public const sbyte PLACE_Y_DEC = 10;
        public const sbyte PLACE_Z_INC = 11;
        public const sbyte PLACE_Z_DEC = 12;
        public const sbyte PLACE_ROLL_CCW = 13;
        public const sbyte PLACE_ROLL_CW = 14;
        public const sbyte PLACE_PITCH_UP = 15;
        public const sbyte PLACE_PITCH_DOWN = 16;
        //  Move Type
        public const sbyte MOVE_HEXAPOD = 17;
        public const sbyte MOVE_LEG = 18;
        //  Pose Control
        public const sbyte HOME_POSE = 19;
        public const sbyte SLEEP_POSE = 20;
        // ########################################################################################################
        //  Customize configurations for the Interbotix Hexapod
        //  Cycle through the various gaits when in 'move_hexapod' mode
        public const sbyte GAIT_NEXT = 21;
        public const sbyte GAIT_PREVIOUS = 22;
        //  Cycle through the legs when in 'move_leg' mode
        public const sbyte LEG_NEXT = 23;
        public const sbyte LEG_PREVIOUS = 24;
        //  Widen or narrow the hexapod's stance
        public const sbyte WIDEN_STANCE = 25;
        public const sbyte NARROW_STANCE = 26;
        //  Reboot motors if necessary
        public const sbyte REBOOT_MOTORS = 27;
        //  Set the current stance and hexapod height to be the new 'Home Pose'
        public const sbyte SET_HOME_POSE = 28;
        //  Inc/Dec speed
        public const sbyte SPEED_INC = 29;
        public const sbyte SPEED_DEC = 30;
        //  Quickly toggle between a fast and slow speed setting
        public const sbyte SPEED_COURSE = 31;
        public const sbyte SPEED_FINE = 32;
        // ########################################################################################################
        //  Control the motion of the Interbotix Hexapod
        public sbyte world_x_cmd;
        public sbyte world_y_cmd;
        public sbyte world_yaw_cmd;
        public sbyte place_x_cmd;
        public sbyte place_y_cmd;
        public sbyte place_z_cmd;
        public sbyte place_roll_cmd;
        public sbyte place_pitch_cmd;
        public sbyte pose_cmd;
        public sbyte move_type_cmd;
        //  Other Options
        public sbyte gait_toggle_cmd;
        public sbyte leg_toggle_cmd;
        public sbyte stance_cmd;
        public sbyte reboot_cmd;
        public sbyte set_home_pose_cmd;
        //  Speed Configs
        public sbyte speed_cmd;
        public sbyte speed_toggle_cmd;

        public HexJoyMsg()
        {
            this.world_x_cmd = 0;
            this.world_y_cmd = 0;
            this.world_yaw_cmd = 0;
            this.place_x_cmd = 0;
            this.place_y_cmd = 0;
            this.place_z_cmd = 0;
            this.place_roll_cmd = 0;
            this.place_pitch_cmd = 0;
            this.pose_cmd = 0;
            this.move_type_cmd = 0;
            this.gait_toggle_cmd = 0;
            this.leg_toggle_cmd = 0;
            this.stance_cmd = 0;
            this.reboot_cmd = 0;
            this.set_home_pose_cmd = 0;
            this.speed_cmd = 0;
            this.speed_toggle_cmd = 0;
        }

        public HexJoyMsg(sbyte world_x_cmd, sbyte world_y_cmd, sbyte world_yaw_cmd, sbyte place_x_cmd, sbyte place_y_cmd, sbyte place_z_cmd, sbyte place_roll_cmd, sbyte place_pitch_cmd, sbyte pose_cmd, sbyte move_type_cmd, sbyte gait_toggle_cmd, sbyte leg_toggle_cmd, sbyte stance_cmd, sbyte reboot_cmd, sbyte set_home_pose_cmd, sbyte speed_cmd, sbyte speed_toggle_cmd)
        {
            this.world_x_cmd = world_x_cmd;
            this.world_y_cmd = world_y_cmd;
            this.world_yaw_cmd = world_yaw_cmd;
            this.place_x_cmd = place_x_cmd;
            this.place_y_cmd = place_y_cmd;
            this.place_z_cmd = place_z_cmd;
            this.place_roll_cmd = place_roll_cmd;
            this.place_pitch_cmd = place_pitch_cmd;
            this.pose_cmd = pose_cmd;
            this.move_type_cmd = move_type_cmd;
            this.gait_toggle_cmd = gait_toggle_cmd;
            this.leg_toggle_cmd = leg_toggle_cmd;
            this.stance_cmd = stance_cmd;
            this.reboot_cmd = reboot_cmd;
            this.set_home_pose_cmd = set_home_pose_cmd;
            this.speed_cmd = speed_cmd;
            this.speed_toggle_cmd = speed_toggle_cmd;
        }

        public static HexJoyMsg Deserialize(MessageDeserializer deserializer) => new HexJoyMsg(deserializer);

        private HexJoyMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.world_x_cmd);
            deserializer.Read(out this.world_y_cmd);
            deserializer.Read(out this.world_yaw_cmd);
            deserializer.Read(out this.place_x_cmd);
            deserializer.Read(out this.place_y_cmd);
            deserializer.Read(out this.place_z_cmd);
            deserializer.Read(out this.place_roll_cmd);
            deserializer.Read(out this.place_pitch_cmd);
            deserializer.Read(out this.pose_cmd);
            deserializer.Read(out this.move_type_cmd);
            deserializer.Read(out this.gait_toggle_cmd);
            deserializer.Read(out this.leg_toggle_cmd);
            deserializer.Read(out this.stance_cmd);
            deserializer.Read(out this.reboot_cmd);
            deserializer.Read(out this.set_home_pose_cmd);
            deserializer.Read(out this.speed_cmd);
            deserializer.Read(out this.speed_toggle_cmd);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.world_x_cmd);
            serializer.Write(this.world_y_cmd);
            serializer.Write(this.world_yaw_cmd);
            serializer.Write(this.place_x_cmd);
            serializer.Write(this.place_y_cmd);
            serializer.Write(this.place_z_cmd);
            serializer.Write(this.place_roll_cmd);
            serializer.Write(this.place_pitch_cmd);
            serializer.Write(this.pose_cmd);
            serializer.Write(this.move_type_cmd);
            serializer.Write(this.gait_toggle_cmd);
            serializer.Write(this.leg_toggle_cmd);
            serializer.Write(this.stance_cmd);
            serializer.Write(this.reboot_cmd);
            serializer.Write(this.set_home_pose_cmd);
            serializer.Write(this.speed_cmd);
            serializer.Write(this.speed_toggle_cmd);
        }

        public override string ToString()
        {
            return "HexJoyMsg: " +
            "\nworld_x_cmd: " + world_x_cmd.ToString() +
            "\nworld_y_cmd: " + world_y_cmd.ToString() +
            "\nworld_yaw_cmd: " + world_yaw_cmd.ToString() +
            "\nplace_x_cmd: " + place_x_cmd.ToString() +
            "\nplace_y_cmd: " + place_y_cmd.ToString() +
            "\nplace_z_cmd: " + place_z_cmd.ToString() +
            "\nplace_roll_cmd: " + place_roll_cmd.ToString() +
            "\nplace_pitch_cmd: " + place_pitch_cmd.ToString() +
            "\npose_cmd: " + pose_cmd.ToString() +
            "\nmove_type_cmd: " + move_type_cmd.ToString() +
            "\ngait_toggle_cmd: " + gait_toggle_cmd.ToString() +
            "\nleg_toggle_cmd: " + leg_toggle_cmd.ToString() +
            "\nstance_cmd: " + stance_cmd.ToString() +
            "\nreboot_cmd: " + reboot_cmd.ToString() +
            "\nset_home_pose_cmd: " + set_home_pose_cmd.ToString() +
            "\nspeed_cmd: " + speed_cmd.ToString() +
            "\nspeed_toggle_cmd: " + speed_toggle_cmd.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
