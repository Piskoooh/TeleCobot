//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.TelecobotRosUnity
{
    [Serializable]
    public class TelecobotUnityControlMsg : Message
    {
        public const string k_RosMessageName = "telecobot_ros_unity/TelecobotUnityControl";
        public override string RosMessageName => k_RosMessageName;

        //  0:move base, 1:set_ee_pose_components to pose, 2:moveit, 
        //  127:enable torqe, 126:disable torque, 125:reboot error motor, 124:reboot all motors 
        public sbyte cmd_id;
        //  This is a list of poses.
        //  cmd_type==0 recives (x,y,yaw)
        //  cmd_type==1 recives (x,y,z,roll,pitch)
        public double[] pose_data;
        public Geometry.PoseMsg end_effector_pose;
        public Geometry.PoseMsg goal_pose;

        public TelecobotUnityControlMsg()
        {
            this.cmd_id = 0;
            this.pose_data = new double[0];
            this.end_effector_pose = new Geometry.PoseMsg();
            this.goal_pose = new Geometry.PoseMsg();
        }

        public TelecobotUnityControlMsg(sbyte cmd_id, double[] pose_data, Geometry.PoseMsg end_effector_pose, Geometry.PoseMsg goal_pose)
        {
            this.cmd_id = cmd_id;
            this.pose_data = pose_data;
            this.end_effector_pose = end_effector_pose;
            this.goal_pose = goal_pose;
        }

        public static TelecobotUnityControlMsg Deserialize(MessageDeserializer deserializer) => new TelecobotUnityControlMsg(deserializer);

        private TelecobotUnityControlMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.cmd_id);
            deserializer.Read(out this.pose_data, sizeof(double), deserializer.ReadLength());
            this.end_effector_pose = Geometry.PoseMsg.Deserialize(deserializer);
            this.goal_pose = Geometry.PoseMsg.Deserialize(deserializer);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.cmd_id);
            serializer.WriteLength(this.pose_data);
            serializer.Write(this.pose_data);
            serializer.Write(this.end_effector_pose);
            serializer.Write(this.goal_pose);
        }

        public override string ToString()
        {
            return "TelecobotUnityControlMsg: " +
            "\ncmd_id: " + cmd_id.ToString() +
            "\npose_data: " + System.String.Join(", ", pose_data.ToList()) +
            "\nend_effector_pose: " + end_effector_pose.ToString() +
            "\ngoal_pose: " + goal_pose.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
