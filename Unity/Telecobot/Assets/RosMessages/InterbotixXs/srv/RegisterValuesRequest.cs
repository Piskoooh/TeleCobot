//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.InterbotixXs
{
    [Serializable]
    public class RegisterValuesRequest : Message
    {
        public const string k_RosMessageName = "interbotix_xs_msgs/RegisterValues";
        public override string RosMessageName => k_RosMessageName;

        //  Set or get the register(s) value(s) from motor(s)
        // 
        //  To get familiar with the register values, go to...
        //  http://emanual.robotis.com/docs/en/software/dynamixel/dynamixel_workbench/
        //  ...click on a motor model, and scroll down to the 'Control Table of RAM Area' section.
        public string cmd_type;
        //  set to 'group' if commanding a joint group or 'single' if commanding a single joint
        public string name;
        //  name of the group if commanding a joint group or joint if commanding a single joint
        public string reg;
        //  register name (like Profile_Velocity, Profile_Acceleration, etc...)
        public int value;
        //  desired register value (only set if 'setting' a register)

        public RegisterValuesRequest()
        {
            this.cmd_type = "";
            this.name = "";
            this.reg = "";
            this.value = 0;
        }

        public RegisterValuesRequest(string cmd_type, string name, string reg, int value)
        {
            this.cmd_type = cmd_type;
            this.name = name;
            this.reg = reg;
            this.value = value;
        }

        public static RegisterValuesRequest Deserialize(MessageDeserializer deserializer) => new RegisterValuesRequest(deserializer);

        private RegisterValuesRequest(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.cmd_type);
            deserializer.Read(out this.name);
            deserializer.Read(out this.reg);
            deserializer.Read(out this.value);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.cmd_type);
            serializer.Write(this.name);
            serializer.Write(this.reg);
            serializer.Write(this.value);
        }

        public override string ToString()
        {
            return "RegisterValuesRequest: " +
            "\ncmd_type: " + cmd_type.ToString() +
            "\nname: " + name.ToString() +
            "\nreg: " + reg.ToString() +
            "\nvalue: " + value.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
